
- name: Get facts for VM {{ ansible_tower_vm_name }}
  azure_rm_virtualmachine:
    client_id: "{{ azure_client_id }}"
    tenant: "{{ azure_tenant }}"
    subscription_id: "{{ azure_subscription_id }}"
    secret: "{{ azure_secret }}"
    resource_group: "{{ res_group }}"
    name: "{{ ansible_tower_vm_name }}"
  register: vm_facts

- set_fact:
    ansible_tower_ip_address: "{{ vm_facts.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"

- debug:
    msg: "Public IP is {{ ansible_tower_ip_address }}"

- name: Install Ansible Tower
  become: true
  block:

    - name: "Download Tower release from {{ ansible_tower_release_url }}"
      get_url:
        dest: /var/tmp # required. Absolute path of where to download the file to.,If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.,If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) option), but replaced only if the contents changed..
        url: "{{ ansible_tower_release_url }}" # required. HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path
      register: get_tower

    - name: "Extract Tower archive"
      unarchive:
        dest: /var/tmp/ # required. Remote absolute path where the archive should be unpacked.
        src: "/var/tmp/{{ ansible_tower_archive }}" # required. If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack.,If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(get_url) module.
        remote_src: yes # not required. Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.,This option is mutually exclusive with C(copy).
      when: get_tower.changed

    - name: "Set the Tower password in the installation inventory file"
      replace:
        path: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/inventory" 
        regexp: "^(.*)_password=''" 
        replace: "\\1_password='{{ ansible_tower_password }}'"
      when: get_tower.changed

    - name: "Launch Tower installation"
      command: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/setup.sh"
      args:
        chdir: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}"
      when: get_tower.changed or ansible_tower_install != false 

    - name: "Install EPEL"
      yum: 
        name: epel-release
        state: installed

    - name: "Install required Python libraries"
      yum: 
        name: [python2-pip, python2-winrm, python2-requests]  
        state: installed

    - name: "Wait for Tower API to be ready"
      wait_for:
        port: 443
        timeout: 3000
  
  delegate_to: "{{ ansible_tower_vm_name }}"


- name: "Check if there is a license file available on the current directory"
  local_action: stat path=ansible_license.json
  register: ansible_license_check

- set_fact:
    ansible_tower_url: "https://{{ ansible_tower_ip_address }}/"

- name: "Install the Tower license using API"
  when: ansible_license_check.stat.exists
  uri:
    url: "{{ ansible_tower_url }}api/v2/config/"
    body_format: json
    src: "ansible_license.json"
    url_username: "admin"
    url_password: "{{ ansible_tower_password }}"
    force_basic_auth: yes
    method: "POST"
    validate_certs: no
  register: tower_add_license

- name: "Skip the Tower license installation"
  when: not ansible_license_check.stat.exists
  debug:
    msg: "No ansible_license.json file found. Skipping the license installation."